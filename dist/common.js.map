{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;ACdA;AAAA;AAWA;;AAEA;AAAA;AAAA;AATA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAGA","sources":["webpack://wx-english-dictation/._src_mock_sentences.ts","webpack://wx-english-dictation/._src_services_wechatCloudDataService.ts","webpack://wx-english-dictation/._src_store_index.ts","webpack://wx-english-dictation/._src_store_sentence.ts"],"sourcesContent":["import { AudioDetail } from '../services/dataService'\n\nexport const mockData: { list: AudioDetail[] } = {\n  list: [\n    {\n      audioClip: {\n        _id: '1',\n        sentence_id: '1',\n        url: '/assets/audio/common_voice_en_40865211.mp3',\n        duration: 3\n      },\n      sentence: {\n        _id: '1',\n        text: 'Hello, how are you?',\n        translation: '你好，你好吗？',\n        level: 1,\n        category: '日常对话'\n      }\n    },\n    {\n      audioClip: {\n        _id: '2',\n        sentence_id: '2',\n        url: '/assets/audio/common_voice_en_40865211.mp3',\n        duration: 4\n      },\n      sentence: {\n        _id: '2',\n        text: 'Nice to meet you.',\n        translation: '很高兴见到你。',\n        level: 1,\n        category: '日常对话'\n      }\n    }\n  ]\n} ","import { IDataService, AudioDetail, CloudFunctionResponse } from './dataService'\nimport { mockData } from '../mock/sentences'\nimport Taro from '@tarojs/taro'\n\nexport class WechatCloudDataService implements IDataService {\n  private isCloudAvailable(): boolean {\n    return process.env.TARO_ENV === 'weapp' && !!Taro.cloud;\n  }\n\n  async getSentenceList(): Promise<AudioDetail[]> {\n    if (!this.isCloudAvailable()) {\n      console.log('使用mock数据');\n      return Promise.resolve(mockData.list);\n    }\n\n    try {\n      const { result } = await wx.cloud.callFunction({\n        name: 'getSentenceList',\n        data: {}\n      }) as { result: CloudFunctionResponse<AudioDetail> };\n\n      if (!result.list) {\n        throw new Error('No data returned');\n      }\n\n      return result.list;\n    } catch (error) {\n      console.error('获取句子列表失败:', error);\n      return mockData.list;\n    }\n  }\n\n  async getAudioDetail(audio_id: string): Promise<AudioDetail> {\n    if (!this.isCloudAvailable()) {\n      const detail = mockData.list.find(item => item.audioClip._id === audio_id);\n      if (!detail) {\n        throw new Error('Audio not found');\n      }\n      return detail;\n    }\n\n    try {\n      const { result } = await wx.cloud.callFunction({\n        name: 'getAudioDetail',\n        data: { audio_id }\n      }) as { result: AudioDetail & { errMsg: string } };\n\n      if (result.errMsg !== 'ok') {\n        throw new Error(result.errMsg);\n      }\n\n      return {\n        audioClip: result.audioClip,\n        sentence: result.sentence\n      };\n    } catch (error) {\n      console.error('获取音频详情失败:', error);\n      const detail = mockData.list.find(item => item.audioClip._id === audio_id);\n      if (!detail) {\n        throw new Error('Audio not found');\n      }\n      return detail;\n    }\n  }\n} ","import { createContext, useContext } from 'react'\nimport SentenceStore from './sentence'\nimport { WechatCloudDataService } from '../services/wechatCloudDataService'\n\nconst dataService = new WechatCloudDataService()\n\nconst store = {\n  sentenceStore: new SentenceStore(dataService)\n}\n\nconst StoreContext = createContext(store)\n\nexport const useStore = () => useContext(StoreContext)\n\nexport default store\n","import { makeAutoObservable } from 'mobx'\nimport { IDataService, AudioDetail } from '../services/dataService'\n\nclass SentenceStore {\n  audioList: AudioDetail[] = []\n  currentAudio: AudioDetail | null = null\n  loading = false\n  dataService: IDataService\n  currentIndex: number = 0\n  correctCount: number = 0\n  wrongCount: number = 0\n  attemptedQuestions: Set<string> = new Set() // 记录已尝试的题目ID\n\n  constructor(dataService: IDataService) {\n    makeAutoObservable(this)\n    this.dataService = dataService\n  }\n\n  get totalAttempted() {\n    return this.attemptedQuestions.size\n  }\n\n  get accuracy() {\n    if (this.totalAttempted === 0) return 0\n    return Math.round((this.correctCount / this.totalAttempted) * 100)\n  }\n\n  async fetchAudioList() {\n    this.loading = true\n    try {\n      const list = await this.dataService.getSentenceList()\n      this.audioList = list\n      if (!this.currentAudio && list?.length > 0) {\n        this.currentAudio = list[0]\n        this.currentIndex = 0\n      }\n    } finally {\n      this.loading = false\n    }\n  }\n\n  setCurrentAudio(audio: AudioDetail) {\n    this.currentAudio = audio\n    this.currentIndex = this.audioList.findIndex(a => a.audioClip._id === audio.audioClip._id)\n  }\n\n  nextSentence() {\n    const nextIndex = this.currentIndex + 1\n    if (nextIndex < this.audioList?.length) {\n      this.currentIndex = nextIndex\n      this.currentAudio = this.audioList[nextIndex]\n    } else {\n      // 回到第一题\n      this.currentIndex = 0\n      this.currentAudio = this.audioList[0]\n    }\n  }\n\n  checkAnswer(userInput: string): boolean {\n    if (!this.currentAudio) return false\n    \n    const isCorrect = userInput.trim().toLowerCase() === this.currentAudio.sentence.text.trim().toLowerCase()\n    \n    // 只在第一次回答时计入统计\n    if (!this.attemptedQuestions.has(this.currentAudio.audioClip._id)) {\n      this.attemptedQuestions.add(this.currentAudio.audioClip._id)\n      if (isCorrect) {\n        this.correctCount++\n      } else {\n        this.wrongCount++\n      }\n    }\n    \n    return isCorrect\n  }\n\n  resetStats() {\n    this.correctCount = 0\n    this.wrongCount = 0\n    this.attemptedQuestions.clear()\n  }\n}\n\nexport default SentenceStore\n"],"names":[],"sourceRoot":""}